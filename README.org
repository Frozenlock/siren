* Siren

  A clojurescript library for easy growl-like notifications.

  Based on [[https://github.com/levand/domina][domina]] and [[https://github.com/ckirkendall/enfocus][enfocus]].

  To use: =[siren "0.1.4"]= in your project dependencies.

  Comes with two default color scheme: light and dark. You can of
  course give your own, either with CSS (the =siren-box= class) or by
  an optional argument.

** Usage

#+BEGIN_SRC
(sticky-siren! "Hello!")
(siren! {:content "I'm dark!})
(siren! {:content "I'm light!" :style :light})
(siren! {:html-content "<div>I'm light!</div><div>And complex!</div>" :style :light})
#+END_SRC
   [[./siren/raw/master/siren.jpg]]

   The =sticky-siren!= will remain until discarded with =remove-siren!= or
   =remove-all-sirens!=.
   
   You can set the content of a siren however you like. Either
   directly, as =(siren! "Hey I'm content!")= or as direct HTML data:
   =(siren! {:html-content "<div>Oh, really?</div>"})=.
   
   The style can be set by giving it directly to the siren
: (siren! {:style {:width "300px" :color "grey"} :content "Oy!"})
   Or by setting the CSS.

   Here are the possible options:
   - :style
     - :dark, :light, :css or your own style in the form ={:background "grey" :padding "10px"}=
   - :html-content
     - Any HTML content. Divs, spans, floats...
   - :content
     - A string, if you are happy with the default appearance.
   - :delay
     - Time in ms before the siren is discarded.

: (siren! {:html-content "<div>Oy!</div> :style {:width "300px" :color "white" :background "black"} :delay 3000})
*** Complex input

    Siren will accept raw HTML. You can send HTML with multiple =div=
    if you want to do so. You can also use [[https://github.com/cgrand/enlive][enlive]] templates. How about
    some image in the siren?

*** Re-using the same siren multiple times
    
    To customize an existing siren box, use the =replace-siren!=
    function:

    #+BEGIN_SRC
(replace-siren! siren-object {:content "Oh hey!"})
    #+END_SRC
    This is mostly useful for a sticky-siren.

    
    You can also create a function that will always send its content
    to the same siren (and reset the timeout delay) with
    =continuous-siren-factory=.
    
    #+BEGIN_SRC
(def my-siren (continuous-siren-factory))
(my-siren "I'm the initial message!")
(my-siren {:content "I'm the second message!" :style :light})
    #+END_SRC
    
    
    May the power of the REPL be with you!
    
** License
   
   Copyright Â© 2012 Frozenlock
   
   Distributed under the Eclipse Public License, the same as Clojure.
